/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;



import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import dao.ConnectionProvider;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.BorderFactory;
import javax.swing.Timer;
import utility.BDutility;
import java.sql.*;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author muzammil
 */
public class MarkAttendance extends javax.swing.JFrame implements Runnable , ThreadFactory{

    private WebcamPanel panel = null;
    private Webcam webcam = null; 
    private final ExecutorService executor = Executors.newSingleThreadExecutor(this);
    private volatile boolean running = true;

    public MarkAttendance() {
        initComponents();
        BDutility.setimage(this,"images/abc1.jpg",1366,760);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(12,12,12,12,Color.BLACK)); 
        initWebcam();
        
        Timer timer = new Timer(1,e->updateTime());
        timer.start();
        
    }

    private void updateTime (){
        SimpleDateFormat simpleDateFormat = new  SimpleDateFormat("yyyy-MM--dd HH:mm:ss.SSS");
        lblTime.setText(simpleDateFormat.format(new Date()));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        webCamPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bdmexit = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        lblCheckInCheckout = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblTime1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 768));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1366, 760));

        webCamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Mark Attendence");

        bdmexit.setBackground(new java.awt.Color(255, 0, 0));
        bdmexit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bdmexit.setForeground(new java.awt.Color(255, 255, 255));
        bdmexit.setText("X");
        bdmexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdmexitActionPerformed(evt);
            }
        });

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTime.setText("TIME");

        lblImage.setText("jLabel4");

        lblCheckInCheckout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lblTime1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTime1.setText("Date/Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(503, 503, 503)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bdmexit, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(912, 912, 912)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(897, 897, 897)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblCheckInCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bdmexit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(lblTime1)
                        .addGap(3, 3, 3)
                        .addComponent(lblTime)
                        .addGap(36, 36, 36)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCheckInCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 291, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bdmexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdmexitActionPerformed
        running = false;
        stopWebcam();
        if(executor!=null && !executor.isShutdown()){
            executor.shutdown();
        }
        this.dispose();
    }//GEN-LAST:event_bdmexitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bdmexit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCheckInCheckout;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTime1;
    private javax.swing.JPanel webCamPanel;
    // End of variables declaration//GEN-END:variables
Map<String, String> resultMap = new HashMap<>();
    @Override
    public void run() {
        do{
            try{
                Thread.sleep(1000);
            }catch(InterruptedException ex){
                
            }
            try{
                Result result = null;
                BufferedImage image = null;
                
                if(webcam.isOpen()){
                    if((image = webcam.getImage())==null){
                        continue;
                    }
                }
                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap (new HybridBinarizer(source));
                
                try{
                    result = new MultiFormatReader().decode(bitmap);
                    }catch(NotFoundException ex){
                     
                    }
                    if(result != null){
                        String jsonString = result.getText();
                        Gson gson = new Gson();
                        java.lang.reflect.Type type =  new TypeToken<Map<String,String>>(){
                            
                        }.getType();
                        resultMap = gson.fromJson(jsonString ,type);
                        
                        String finalPath = BDutility.getPath("images\\"+resultMap.get("email")+".jpg");
                        CircularImageFrame(finalPath);
                    }
                  
                }catch(JsonSyntaxException ex){
                  
                }
                
           
        }while(running); 
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r,"My Thread");
        t.setDaemon(true);
        return t;
    }
    private void stopWebcam(){
        if(webcam!=null && webcam.isOpen() ){
            webcam.close();
        }
    }

    private void initWebcam() {
      webcam = Webcam.getDefault();
      if(webcam!= null){
          Dimension[] resolutions = webcam.getViewSizes();
          Dimension maxResolution = resolutions[resolutions.length-1];
          
          if(webcam.isOpen()){
              webcam.close();
          }
          webcam.setViewSize(maxResolution);
          webcam.isOpen();
          
          panel = new WebcamPanel(webcam);
          panel.setPreferredSize(maxResolution);
          panel.setFPSDisplayed(true); 
          
          webCamPanel.add(panel,new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 689, 518));
          executor.execute(this);
          executor.shutdown();
      }else{
          System.out.println("Issue With Webcam.");
      }
    }
    private BufferedImage imagee= null;
    private void CircularImageFrame(String imagePath) {
             
                try{
                    Connection con = ConnectionProvider.getCon();
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select * from  userdetails ");
                    
                    if(!rs.next()){
                    JOptionPane.showMessageDialog(null, "Duplicate Email", "Duplicate", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            
            imagee = null;
            File imageFile = new File(imagePath);
            if(imageFile.exists()){
                try{
                    imagee = ImageIO.read(new File(imagePath));
                    imagee = createCircularImage(imagee);
                    ImageIcon icon = new ImageIcon(imagee);
                    lblImage.setIcon(icon);
                 }catch(IOException ex){
                }
            }else {
                BufferedImage imageeee = new BufferedImage(300,300,BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = imageeee.createGraphics();
                
                g2d.setColor(Color.BLACK);
                g2d.fillOval(25,25,250,250);
                
                g2d.setFont(new Font("Serif",Font.BOLD,250));
                g2d.setColor(Color.WHITE);
                g2d.drawString(String.valueOf(resultMap.get("name").charAt(0)).toUpperCase(),75,225);
                g2d.dispose();
                
                ImageIcon imageIcon = new ImageIcon(imageeee);
                lblImage.setIcon(imageIcon);
                this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.pack();
                this.setLocationRelativeTo(null);
                this.setVisible(true);
            }
            lblName.setHorizontalAlignment(JLabel.CENTER);
lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            lblName.setText(resultMap.get("name"));
            if(!CheckInCheckout()){
            }
                    }catch(HeadlessException | SQLException ex){
        }
    }

    private void showPopUpForCertainDuration(String popUpMessage, String popUpHeader ,Integer iconId)throws HeadlessException {
        final JOptionPane optionPane = new JOptionPane(popUpMessage,iconId);
        final JDialog dailog = optionPane.createDialog(popUpHeader);
        Timer timer = new Timer (5000, (ActionEvent e) -> {
            dailog.dispose();
            clearUserDetails();
        });
        timer.setRepeats(false);
        timer.start();
        dailog.dispose();
       
    } 
     private void clearUserDetails() {
               lblCheckInCheckout.setText("");
               lblCheckInCheckout.setBackground(null);
               lblCheckInCheckout.setForeground(null);
               lblCheckInCheckout.setOpaque(false);
               lblName.setText("");
               lblImage.setIcon(null); 
              
            }

    private BufferedImage createCircularImage(BufferedImage image) {
      int diameter = 285;
        BufferedImage resizedImage = new BufferedImage(diameter,diameter,BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 =  resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(image,0,0,diameter,diameter,null);
        g2.dispose();
        BufferedImage circularImage = new BufferedImage(diameter,diameter,BufferedImage.TYPE_INT_ARGB);
        g2 = circularImage.createGraphics();
        Ellipse2D.Double circle = new Ellipse2D.Double(0,0,diameter,diameter);
        g2.setClip(circle);
        g2.drawImage(resizedImage, 0, 0,null);
        g2.dispose();
        return circularImage;
    }

    private boolean CheckInCheckout() throws SQLException {
        String popUpHeader= null;
        String popUpMessage = null;
        Color color = null;
         
        Connection con = ConnectionProvider.getCon();
        Statement st = con.createStatement();
        
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("YY-MM-dd");
        
        LocalDateTime  currentDateTime = LocalDateTime.now();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("YY-MM-dd HH:mm:ss");
        
        ResultSet rs = st.executeQuery("Select * from userattedance where date='" +currentDate.format(dateFormatter) + "'and userid=" + Integer.valueOf(resultMap.get("id")) + ";");
        
        Connection connection = ConnectionProvider.getCon();
        if(rs.next()){
            String checkOutDateTime = rs.getString(4);
            if( checkOutDateTime !=null){
                popUpMessage =" Already Checkout for the day";
                popUpHeader = "Invalid checkout";
                try {
                    showPopUpForCertainDuration(checkOutDateTime, popUpHeader,JOptionPane.ERROR_MESSAGE);
                }catch(HeadlessException ex){
                }
                return false;
            }
            
            
            String checkIndateTime = rs.getString(3);
            LocalDateTime checkInLocalDateTime = LocalDateTime.parse(checkIndateTime, dateTimeFormatter);
            Duration duration = Duration.between(checkInLocalDateTime,currentDateTime);
            
            long hours =duration.toHours();
            long minutes =duration.minusHours(hours).toMinutes();
            long seconds =duration.minusHours(hours).minusMinutes(minutes).getSeconds();
            
            if(!(hours>0 || (hours==0 && minutes>=5)) )
            {
            long remaingMinutes = 4-minutes ;
            long remainingSeconds=60-seconds;
            
            popUpMessage = String.format("""
                                         Your work duration is less than 5 minutes
                                         You can check out after: %d minutes and %d seconds """,remaingMinutes,remainingSeconds);
            popUpHeader="Duration Warning";
                showPopUpForCertainDuration(popUpMessage, popUpHeader,JOptionPane.WARNING_MESSAGE );
                return false;
            
            
            }
            String UpdateQuery ="Update  userattendence set checkout=?,workduration=? where date =? and userid =?";
            PreparedStatement preparestatement = connection.prepareStatement(UpdateQuery);
            preparestatement.setString(1,currentDateTime.format(dateTimeFormatter));
            preparestatement.setString(2," "+hours+"Hours and "+minutes +"minutes");
            preparestatement.setString(3,currentDateTime.format(dateTimeFormatter));
            preparestatement.setString(4,resultMap.get("id"));
        
            preparestatement.executeUpdate();
            popUpHeader = "Checkout";
            popUpMessage = "Checkout  at " + currentDateTime.format(dateTimeFormatter) + ""
                    + "\nWork Duration" + hours + "hours and " + minutes + "minutes";
            color =Color.RED;
            
            
        }else{
            String insertQuery="INSERT into userattendence (userid,date,checkin)VALUES(?,?,?)";
            PreparedStatement preparestatement =connection.prepareStatement(insertQuery);
            preparestatement.setString(1,currentDateTime.format(dateTimeFormatter));
            preparestatement.setString(2,resultMap.get("id"));
            preparestatement.setString(3,currentDateTime.format(dateTimeFormatter));
            preparestatement.executeUpdate();
            
            popUpHeader="Checkin";
            popUpMessage="Checkin  at "+currentDateTime.format(dateTimeFormatter);
            color =Color.GREEN;
            
            
        }
        lblCheckInCheckout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCheckInCheckout.setText(popUpHeader);
        lblCheckInCheckout.setForeground(color);
        lblCheckInCheckout.setBackground(Color.DARK_GRAY);
        lblCheckInCheckout.setOpaque(true);
        try {
            showPopUpForCertainDuration(popUpHeader, popUpHeader, JOptionPane.INFORMATION_MESSAGE);
        }catch(HeadlessException ex){
        }
        return false;
        
    }
    @Override
    public void paint(Graphics g ){
        super.paint(g);
        if(imagee !=null){
            g.drawImage(imagee,0,0,null );
        }
    }
}

